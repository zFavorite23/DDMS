{"remainingRequest":"D:\\DDMS\\node_modules\\thread-loader\\dist\\cjs.js!D:\\DDMS\\node_modules\\babel-loader\\lib\\index.js!D:\\DDMS\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\DDMS\\src\\role.js","dependencies":[{"path":"D:\\DDMS\\src\\role.js","mtime":1592451200214},{"path":"D:\\DDMS\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\DDMS\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\DDMS\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\DDMS\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"D:\\\\DDMS\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport router from \"./router/index\";\nimport store from \"./store/index\";\nimport NProgress from \"nprogress\"; // Progress 进度条\n\nimport \"nprogress/nprogress.css\"; // Progress 进度条样式\n\nimport { getUserId } from \"./utils/auth\"; // 验权\n\nimport { Message } from \"element-ui\";\nimport { asyncRouterMap } from \"./router/index\"; // permissiom judge\n\nfunction hasRole(authRules, permissionAuthRules) {\n  if (!authRules || authRules.length <= 0) {\n    return false;\n  }\n\n  if (authRules.indexOf(\"admin\") >= 0) return true; // admin权限 直接通过\n\n  if (!permissionAuthRules) return true;\n  return authRules.some(function (role) {\n    return permissionAuthRules.indexOf(role) >= 0;\n  });\n}\n/**\r\n * 通过meta.role判断是否与当前用户权限匹配\r\n * @param authRules\r\n * @param route\r\n */\n\n\nfunction hasRouterRole(authRules, route) {\n  if (authRules.indexOf(\"admin\") >= 0 || !route.meta || !route.meta.authRule) {\n    return true;\n  }\n\n  return authRules.some(function (authRule) {\n    return route.meta.authRule.indexOf(authRule) >= 0;\n  });\n}\n/**\r\n * 递归过滤异步路由表，返回符合用户角色权限的路由表\r\n * @param asyncRouterMap\r\n * @param authRules\r\n */\n\n\nfunction filterAsyncRouter(asyncRouterMap, authRules) {\n  var accessedRouters = asyncRouterMap.filter(function (route) {\n    if (hasRouterRole(authRules, route)) {\n      if (route.children && route.children.length) {\n        route.children = filterAsyncRouter(route.children, authRules);\n      }\n\n      return true;\n    }\n\n    return false;\n  });\n  return accessedRouters;\n} // register global progress.\n\n\nvar whiteList = [\"/login\", \"/401\", \"/404\", \"/500\"]; // 不重定向白名单\n\nrouter.beforeEach(function (to, from, next) {\n  NProgress.start(); // 开启Progress\n\n  if (whiteList.indexOf(to.path) !== -1) {\n    // 在免登录白名单，直接进入\n    next();\n    return;\n  }\n\n  var userId = getUserId();\n\n  if (userId !== \"undefined\" && userId !== \"\" && userId) {\n    // 判断是否有token\n    if (to.path === \"/login\") {\n      next({\n        path: \"/\"\n      });\n      NProgress.done(); // router在hash模式下 手动改变hash 重定向回来 不会触发afterEach 暂时hack方案 ps：history模式下无问题，可删除该行！\n\n      return;\n    }\n\n    if (!store.getters.userName && (!store.getters.authRules || store.getters.authRules.length === 0)) {\n      // 判断当前用户是否已拉取完用户信息\n      store.dispatch(\"userInfo\").then(function (data) {\n        // 拉取user_info\n        var authRules = data.roles || [];\n\n        if (!(authRules instanceof Array) || authRules.length === 0) {\n          Message.error(\"权限验证失败，请联系管理员~\");\n          next({\n            path: \"/401\",\n            query: {\n              noGoBack: true\n            }\n          });\n          NProgress.done();\n          return;\n        }\n\n        var accessedRouters = filterAsyncRouter(asyncRouterMap, authRules); // 生成可访问的路由表\n\n        router.addRoutes(accessedRouters); // 动态添加可访问路由表\n\n        next(_objectSpread({}, to)); // hack方法 确保addRoutes已完成\n        // 设置左边导航栏\n\n        store.dispatch(\"filterRouter\", {\n          accessedRouters: accessedRouters\n        }).then(function () {});\n      }).catch(function () {\n        store.dispatch(\"fedLogout\").then(function () {\n          Message.error(\"验证失败,请重新登录\");\n          var redirect = to.fullPath;\n          store.dispatch(\"loginOut\").then(function () {\n            next({\n              path: \"/login\",\n              query: {\n                redirect: redirect\n              }\n            });\n          });\n        });\n      });\n      return;\n    } // 没有动态改变权限的需求可直接next() 删除下方权限判断 ↓\n\n\n    if (hasRole(store.getters.authRules, to.meta.authRule)) {\n      next(); //\n\n      return;\n    }\n\n    next({\n      path: \"/401\",\n      query: {\n        noGoBack: true\n      }\n    });\n    NProgress.done(); // router在hash模式下 手动改变hash 重定向回来 不会触发afterEach 暂时hack方案 ps：history模式下无问题，可删除该行！\n\n    return;\n  }\n\n  var redirect = to.fullPath;\n  store.dispatch(\"loginOut\").then(function () {\n    next({\n      path: \"/login\",\n      query: {\n        redirect: redirect\n      }\n    });\n  }); // 否则全部重定向到登录页\n\n  NProgress.done(); // router在hash模式下 手动改变hash 重定向回来 不会触发afterEach 暂时hack方案 ps：history模式下无问题，可删除该行！\n});\nrouter.afterEach(function () {\n  NProgress.done(); // 结束Progress\n});",null]}