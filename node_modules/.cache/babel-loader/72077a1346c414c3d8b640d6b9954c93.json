{"remainingRequest":"D:\\DDMS\\node_modules\\babel-loader\\lib\\index.js!D:\\DDMS\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\DDMS\\src\\utils\\axios.js","dependencies":[{"path":"D:\\DDMS\\src\\utils\\axios.js","mtime":1588235430034},{"path":"D:\\DDMS\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\DDMS\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\DDMS\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\nimport axios from \"axios\";\nimport { serialize } from \"@/utils/utils\";\nimport { Message } from \"element-ui\";\nimport store from \"../store/index\";\nimport { BASE_URL } from \"../config/app\";\nimport router from \"../router/index\"; // 创建axios实例\n\nvar service = axios.create({\n  baseURL: BASE_URL,\n  // api的base_url\n  timeout: 5000 // 请求超时时间\n\n}); // 返回其他状态吗\n\nservice.defaults.validateStatus = function (status) {\n  return status >= 200 && status <= 500; // 默认的\n}; // 跨域请求，允许保存cookie\n\n\nservice.defaults.withCredentials = true; // HTTPrequest拦截\n\nservice.interceptors.request.use(function (config) {\n  var isToken = (config.headers || {}).isToken === false;\n  var token = store.getters.token;\n\n  if (token && !isToken) {\n    config.headers[\"Authorization\"] = \"Bearer \" + token; // token\n  } // headers中配置serialize为true开启序列化\n\n\n  if (config.method === \"post\" && config.headers.serialize) {\n    config.data = serialize(config.data);\n    delete config.data.serialize;\n  }\n\n  return config;\n}, function (error) {\n  return Promise.reject(error);\n}); // HTTPresponse拦截\n\nservice.interceptors.response.use(function (response) {\n  var status = Number(response.status) || 200;\n  var message = response.data.msg;\n\n  if (status === 401) {\n    Message({\n      message: message,\n      type: \"error\"\n    });\n    store.dispatch(\"FedLogOut\").then(function () {\n      router.push({\n        path: \"/login\"\n      });\n    });\n    return;\n  }\n\n  if (status !== 200 || response.data.code === 1) {\n    Message({\n      message: message,\n      type: \"error\"\n    });\n    return Promise.reject(new Error(message));\n  }\n\n  return response;\n}, function (error) {\n  return Promise.reject(new Error(error));\n});\nexport default service;",{"version":3,"sources":["D:/DDMS/src/utils/axios.js"],"names":["axios","serialize","Message","store","BASE_URL","router","service","create","baseURL","timeout","defaults","validateStatus","status","withCredentials","interceptors","request","use","config","isToken","headers","token","getters","method","data","error","Promise","reject","response","Number","message","msg","type","dispatch","then","push","path","code","Error"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,eAA1B;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,OAAOC,KAAP;AACA,SAASC,QAAT;AACA,OAAOC,MAAP,wB,CAEA;;AACA,IAAMC,OAAO,GAAGN,KAAK,CAACO,MAAN,CAAa;AACzBC,EAAAA,OAAO,EAAEJ,QADgB;AACN;AACnBK,EAAAA,OAAO,EAAE,IAFgB,CAEX;;AAFW,CAAb,CAAhB,C,CAKA;;AACAH,OAAO,CAACI,QAAR,CAAiBC,cAAjB,GAAkC,UAASC,MAAT,EAAiB;AAC/C,SAAOA,MAAM,IAAI,GAAV,IAAiBA,MAAM,IAAI,GAAlC,CAD+C,CACR;AAC1C,CAFD,C,CAGA;;;AACAN,OAAO,CAACI,QAAR,CAAiBG,eAAjB,GAAmC,IAAnC,C,CAEA;;AACAP,OAAO,CAACQ,YAAR,CAAqBC,OAArB,CAA6BC,GAA7B,CACI,UAAAC,MAAM,EAAI;AACN,MAAMC,OAAO,GAAG,CAACD,MAAM,CAACE,OAAP,IAAkB,EAAnB,EAAuBD,OAAvB,KAAmC,KAAnD;AACA,MAAME,KAAK,GAAGjB,KAAK,CAACkB,OAAN,CAAcD,KAA5B;;AACA,MAAIA,KAAK,IAAI,CAACF,OAAd,EAAuB;AACnBD,IAAAA,MAAM,CAACE,OAAP,CAAe,eAAf,IAAkC,YAAYC,KAA9C,CADmB,CACkC;AACxD,GALK,CAON;;;AACA,MAAIH,MAAM,CAACK,MAAP,KAAkB,MAAlB,IAA4BL,MAAM,CAACE,OAAP,CAAelB,SAA/C,EAA0D;AACtDgB,IAAAA,MAAM,CAACM,IAAP,GAActB,SAAS,CAACgB,MAAM,CAACM,IAAR,CAAvB;AACA,WAAON,MAAM,CAACM,IAAP,CAAYtB,SAAnB;AACH;;AACD,SAAOgB,MAAP;AACH,CAdL,EAeI,UAAAO,KAAK,EAAI;AACL,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,CAjBL,E,CAoBA;;AACAlB,OAAO,CAACQ,YAAR,CAAqBa,QAArB,CAA8BX,GAA9B,CACI,UAAAW,QAAQ,EAAI;AACR,MAAMf,MAAM,GAAGgB,MAAM,CAACD,QAAQ,CAACf,MAAV,CAAN,IAA2B,GAA1C;AACA,MAAMiB,OAAO,GAAGF,QAAQ,CAACJ,IAAT,CAAcO,GAA9B;;AACA,MAAIlB,MAAM,KAAK,GAAf,EAAoB;AAChBV,IAAAA,OAAO,CAAC;AACJ2B,MAAAA,OAAO,EAAEA,OADL;AAEJE,MAAAA,IAAI,EAAE;AAFF,KAAD,CAAP;AAIA5B,IAAAA,KAAK,CAAC6B,QAAN,CAAe,WAAf,EAA4BC,IAA5B,CAAiC,YAAM;AACnC5B,MAAAA,MAAM,CAAC6B,IAAP,CAAY;AAAEC,QAAAA,IAAI,EAAE;AAAR,OAAZ;AACH,KAFD;AAGA;AACH;;AAED,MAAIvB,MAAM,KAAK,GAAX,IAAkBe,QAAQ,CAACJ,IAAT,CAAca,IAAd,KAAuB,CAA7C,EAAgD;AAC5ClC,IAAAA,OAAO,CAAC;AACJ2B,MAAAA,OAAO,EAAEA,OADL;AAEJE,MAAAA,IAAI,EAAE;AAFF,KAAD,CAAP;AAIA,WAAON,OAAO,CAACC,MAAR,CAAe,IAAIW,KAAJ,CAAUR,OAAV,CAAf,CAAP;AACH;;AAED,SAAOF,QAAP;AACH,CAxBL,EAyBI,UAAAH,KAAK,EAAI;AACL,SAAOC,OAAO,CAACC,MAAR,CAAe,IAAIW,KAAJ,CAAUb,KAAV,CAAf,CAAP;AACH,CA3BL;AA6BA,eAAelB,OAAf","sourcesContent":["import axios from \"axios\";\r\nimport { serialize } from \"@/utils/utils\";\r\nimport { Message } from \"element-ui\";\r\nimport store from \"../store/index\";\r\nimport { BASE_URL } from \"../config/app\";\r\nimport router from \"../router/index\";\r\n\r\n// 创建axios实例\r\nconst service = axios.create({\r\n    baseURL: BASE_URL, // api的base_url\r\n    timeout: 5000 // 请求超时时间\r\n});\r\n\r\n// 返回其他状态吗\r\nservice.defaults.validateStatus = function(status) {\r\n    return status >= 200 && status <= 500; // 默认的\r\n};\r\n// 跨域请求，允许保存cookie\r\nservice.defaults.withCredentials = true;\r\n\r\n// HTTPrequest拦截\r\nservice.interceptors.request.use(\r\n    config => {\r\n        const isToken = (config.headers || {}).isToken === false;\r\n        const token = store.getters.token;\r\n        if (token && !isToken) {\r\n            config.headers[\"Authorization\"] = \"Bearer \" + token; // token\r\n        }\r\n\r\n        // headers中配置serialize为true开启序列化\r\n        if (config.method === \"post\" && config.headers.serialize) {\r\n            config.data = serialize(config.data);\r\n            delete config.data.serialize;\r\n        }\r\n        return config;\r\n    },\r\n    error => {\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// HTTPresponse拦截\r\nservice.interceptors.response.use(\r\n    response => {\r\n        const status = Number(response.status) || 200;\r\n        const message = response.data.msg;\r\n        if (status === 401) {\r\n            Message({\r\n                message: message,\r\n                type: \"error\"\r\n            });\r\n            store.dispatch(\"FedLogOut\").then(() => {\r\n                router.push({ path: \"/login\" });\r\n            });\r\n            return;\r\n        }\r\n\r\n        if (status !== 200 || response.data.code === 1) {\r\n            Message({\r\n                message: message,\r\n                type: \"error\"\r\n            });\r\n            return Promise.reject(new Error(message));\r\n        }\r\n\r\n        return response;\r\n    },\r\n    error => {\r\n        return Promise.reject(new Error(error));\r\n    }\r\n);\r\nexport default service;\r\n"]}]}