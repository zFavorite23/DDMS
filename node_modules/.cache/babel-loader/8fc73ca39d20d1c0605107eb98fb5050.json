{"remainingRequest":"D:\\DDMS\\node_modules\\thread-loader\\dist\\cjs.js!D:\\DDMS\\node_modules\\babel-loader\\lib\\index.js!D:\\DDMS\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\DDMS\\src\\utils\\utils.js","dependencies":[{"path":"D:\\DDMS\\src\\utils\\utils.js","mtime":1588235430036},{"path":"D:\\DDMS\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\DDMS\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\DDMS\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\DDMS\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/web.dom.iterable\";\nimport * as CryptoJS from \"crypto-js\"; // 表单序列化\n\nexport var serialize = function serialize(data) {\n  var list = [];\n  Object.keys(data).forEach(function (ele) {\n    list.push(\"\".concat(ele, \"=\").concat(data[ele]));\n  });\n  return list.join(\"&\");\n};\n/**\r\n * 生成随机len位数字\r\n */\n\nexport var randomLenNum = function randomLenNum(len, date) {\n  var random = \"\";\n  random = Math.ceil(Math.random() * 100000000000000).toString().substr(0, len || 4);\n  if (date) random = random + Date.now();\n  return random;\n};\n/**\r\n *加密处理\r\n */\n\nexport var encryption = function encryption(params) {\n  var data = params.data,\n      type = params.type,\n      param = params.param,\n      key = params.key;\n  var result = JSON.parse(JSON.stringify(data));\n\n  if (type === \"Base64\") {\n    param.forEach(function (ele) {\n      result[ele] = btoa(result[ele]);\n    });\n  } else {\n    param.forEach(function (ele) {\n      var data = result[ele];\n      key = CryptoJS.enc.Latin1.parse(key);\n      var iv = key; // 加密\n\n      var encrypted = CryptoJS.AES.encrypt(data, key, {\n        iv: iv,\n        mode: CryptoJS.mode.CBC,\n        padding: CryptoJS.pad.ZeroPadding\n      });\n      result[ele] = encrypted.toString();\n    });\n  }\n\n  return result;\n};\nexport function print(content) {\n  var w = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var h = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  // Fixes dual-screen position                         Most browsers      Firefox\n  var dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : screen.left;\n  var dualScreenTop = window.screenTop !== undefined ? window.screenTop : screen.top;\n  var width = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : screen.width;\n  var height = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : screen.height;\n  w = +w === 0 ? width : w;\n  h = +h === 0 ? height : h;\n  var left = width / 2 - w / 2 + dualScreenLeft;\n  var top = height / 2 - h / 2 + dualScreenTop;\n  var myWindow = window.open(\"\", \"打印\", \"toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=yes, copyhistory=no, width=\" + w + \", height=\" + h + \", top=\" + top + \", left=\" + left);\n  var style = \"<style type='text/css'>\" + \"table.gridtable {font-family: verdana,arial,sans-serif;font-size:11px;color:#333333;border-width: 1px;border-color: #666666;}\" + \"table.gridtable th {border-width: 1px;padding: 1px;border-style: solid;border-color: #666666;background-color: #666666;}\" + \"table.gridtable td {border-width: 1px;padding: 1px;border-style: solid;border-color: #666666;background-color: #ffffff;}\" + \"</style>\";\n  myWindow.document.write(content + style);\n  myWindow.focus();\n  myWindow.document.close(); //关闭document的输出流, 显示选定的数据\n\n  myWindow.print(); //打印当前窗口\n\n  return myWindow;\n}",null]}