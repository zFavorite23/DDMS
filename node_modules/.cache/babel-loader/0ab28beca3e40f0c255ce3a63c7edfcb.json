{"remainingRequest":"D:\\DDMS\\node_modules\\thread-loader\\dist\\cjs.js!D:\\DDMS\\node_modules\\babel-loader\\lib\\index.js!D:\\DDMS\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\DDMS\\src\\utils\\axios.js","dependencies":[{"path":"D:\\DDMS\\src\\utils\\axios.js","mtime":1592451687528},{"path":"D:\\DDMS\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\DDMS\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\DDMS\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\DDMS\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\nimport axios from \"axios\";\nimport { serialize } from \"@/utils/utils\";\nimport { Message } from \"element-ui\";\nimport store from \"../store/index\";\nimport { BASE_URL } from \"../config/app\";\nimport router from \"../router/index\"; // 创建axios实例\n\nvar service = axios.create({\n  baseURL: BASE_URL,\n  // api的base_url\n  timeout: 5000 // 请求超时时间\n\n}); // 返回其他状态吗\n\nservice.defaults.validateStatus = function (status) {\n  return status >= 200 && status <= 500; // 默认的\n}; // 跨域请求，允许保存cookie\n\n\nservice.defaults.withCredentials = true; // HTTPrequest拦截\n\nservice.interceptors.request.use(function (config) {\n  var isToken = (config.headers || {}).isToken === false;\n  var token = store.getters.token;\n\n  if (token && !isToken) {\n    config.headers[\"Authorization\"] = \"Bearer \" + token; // token\n  } // headers中配置serialize为true开启序列化\n\n\n  if (config.method === \"post\" && config.headers.serialize) {\n    config.data = serialize(config.data);\n    delete config.data.serialize;\n  }\n\n  return config;\n}, function (error) {\n  return Promise.reject(error);\n}); // HTTPresponse拦截\n\nservice.interceptors.response.use(function (response) {\n  var status = Number(response.status) || 200;\n  var message = response.data.msg;\n\n  if (status === 401) {\n    Message({\n      message: message,\n      type: \"error\"\n    });\n    store.dispatch(\"FedLogOut\").then(function () {\n      router.push({\n        path: \"/login\"\n      });\n    });\n    return;\n  }\n\n  if (status !== 200 || response.data.code === 1) {\n    Message({\n      message: message,\n      type: \"error\"\n    });\n    return Promise.reject(new Error(message));\n  }\n\n  return response;\n}, function (error) {\n  return Promise.reject(new Error(error));\n});\nexport default service;",null]}